from datetime import date, datetime, time
from functools import partial
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.types import CallbackQuery, User, Chat
from aiogram_dialog import DialogManager, ShowMode, StartMode
from aiogram_dialog.manager.bg_manager import BgManager
from aiogram_dialog.widgets.kbd import Button
from aiogram_dialog.widgets.input import TextInput

from src.core.models.bookings import Booking
from src.core.repo.requests import RequestsRepo
from src.tgbot import dp, bot
from src.tgbot.dialog.apartments_users.states import FilteredCatalogApartmentsSG
from .states import ConfirmBooking


async def on_start_date_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, start_date: date):
    today = date.today()  # –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
    
    if start_date < today:
        await callback.answer("–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –∏–ª–∏ –±—É–¥—É—â—É—é –¥–∞—Ç—É.")
    else:
        dialog_manager.dialog_data["start_date"] = start_date
        await callback.answer(f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: {start_date}", show_alert=True)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        await dialog_manager.next()


async def on_end_date_selected(callback: CallbackQuery, widget, dialog_manager: DialogManager, end_date: date):
    start_date = dialog_manager.dialog_data.get("start_date")

    if start_date and end_date <= start_date:
        await callback.answer("–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –∑–∞–µ–∑–¥–∞.", show_alert=True)
    else:
        dialog_manager.dialog_data["end_date"] = end_date
        await callback.answer(f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {end_date}", show_alert=True)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        await dialog_manager.next()


async def back_to_catalog_apartments(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    apartment = dialog_manager.start_data.get("apartment")
    await dialog_manager.start(state=FilteredCatalogApartmentsSG.start, mode=StartMode.RESET_STACK, data=apartment)


async def handle_confirm_booking(
    callback: CallbackQuery,
    widget: Button,
    dialog_manager: DialogManager,
):
    repo: RequestsRepo = dialog_manager.middleware_data.get("repo")
    start_date = dialog_manager.dialog_data.get("start_date")
    end_date = dialog_manager.dialog_data.get("end_date")

    apartment = dialog_manager.start_data.get("apartment")
    landlord_id = apartment["landlord_tg_id"]
    apartment_id = apartment["apartment_id"]
    landlord_chat_id = apartment["landlord_chat_id"]
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    booking: Booking = await repo.apartment_bookings.save_booking(
        tg_id=callback.from_user.id,
        apartment_id=apartment_id,
        start_date=start_date,
        end_date=end_date,
    )
    if booking:
        await callback.answer(text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚úÖ –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!\n\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞—Ä–µ–Ω–¥—ã: " + str(start_date) + "\n–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: " + str(end_date))

        user = User(id=landlord_id, is_bot=False, first_name="landlord")
        chat = Chat(id=landlord_chat_id, type="private")
        bg_manager = BgManager(chat=chat, user=user, bot=bot, router=dp, intent_id=None, stack_id="")
        await bg_manager.start(state=ConfirmBooking.start, data={"booking": booking, "apartment": apartment, "user_id": callback.from_user.id}, show_mode=ShowMode.SEND)
        
        await dialog_manager.start(state=FilteredCatalogApartmentsSG.start, data={"city": None, "price_range": None, "rooms": None}, mode=StartMode.RESET_STACK)
    else:
        await callback.answer(text="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")



async def yes_confirm_booking(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    booking: Booking = dialog_manager.start_data.get("booking")
    user_id = dialog_manager.start_data.get("user_id")
    apartment_id = dialog_manager.start_data.get("apartment")["apartment_id"]
    repo: RequestsRepo = dialog_manager.middleware_data.get("repo")
    scheduler: AsyncIOScheduler = dialog_manager.middleware_data.get("scheduler")
    
    confirm = await repo.apartment_bookings.booking_confirmation(booking_id=booking.id, apartment_id=apartment_id)
    
    if confirm:
        await bot.send_message(chat_id=user_id, text="–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! ‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–∞ 12:00
        update_time = datetime.combine(booking.end_date, time(9, 0)) # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ 1 –¥–µ–Ω—å –≤ 12:00 (–ø–æ –ë–∏—à–∫–µ–∫—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)
        # update_time = datetime.now() + timedelta(seconds=10)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        func = partial(repo.apartment_bookings.update_booking_status, booking.id)
        scheduler.add_job(func=func, trigger='date', run_date=update_time)
        
        await dialog_manager.done(show_mode=ShowMode.DELETE_AND_SEND)
    else:
        await callback.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


async def no_confirm_booking(callback: CallbackQuery, widget: Button, dialog_manager: DialogManager):
    repo: RequestsRepo = dialog_manager.middleware_data.get("repo")
    booking: Booking = dialog_manager.start_data.get("booking")
    user_id = dialog_manager.start_data.get("user_id")
    message: TextInput = dialog_manager.find("cancel_reason").get_value()
    del_bookint = await repo.apartment_bookings.delete_booking(booking_id=booking.id)
    if del_bookint:
        await bot.send_message(chat_id=user_id, text=f"‚ö†Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. \n\nüìñ –ü—Ä–∏—á–∏–Ω–∞: <b>{message}</b>")
        await callback.answer(text="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await dialog_manager.done(show_mode=ShowMode.DELETE_AND_SEND)
    else:
        await callback.answer(text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


